{"file_contents":{"README.md":{"content":"<div align=\"center\">\n  <br />\n    <a href=\"https://www.youtube.com/watch?v=8GK8R77Bd7g\" target=\"_blank\">\n      <img src=\"https://github.com/user-attachments/assets/1c0131c7-9f2d-4e3b-b47c-9679e76d8f9a\" alt=\"Project Banner\">\n    </a>\n  <br />\n  \n  <div>\n    <img src=\"https://img.shields.io/badge/-Next.JS-black?style=for-the-badge&logoColor=white&logo=nextdotjs&color=black\" alt=\"next.js\" />\n    <img src=\"https://img.shields.io/badge/-Vapi-white?style=for-the-badge&color=5dfeca\" alt=\"vapi\" />\n    <img src=\"https://img.shields.io/badge/-Tailwind_CSS-black?style=for-the-badge&logoColor=white&logo=tailwindcss&color=06B6D4\" alt=\"tailwindcss\" />\n    <img src=\"https://img.shields.io/badge/-Firebase-black?style=for-the-badge&logoColor=white&logo=firebase&color=DD2C00\" alt=\"firebase\" />\n  </div>\n\n  <h3 align=\"center\">Prepwise: A job interview preparation platform powered by Vapi AI Voice agents</h3>\n\n   <div align=\"center\">\n     Build this project step by step with our detailed tutorial on <a href=\"https://www.youtube.com/@javascriptmastery/videos\" target=\"_blank\"><b>JavaScript Mastery</b></a> YouTube. Join the JSM family!\n    </div>\n</div>\n\n## üìã <a name=\"table\">Table of Contents</a>\n\n1. ü§ñ [Introduction](#introduction)\n2. ‚öôÔ∏è [Tech Stack](#tech-stack)\n3. üîã [Features](#features)\n4. ü§∏ [Quick Start](#quick-start)\n5. üï∏Ô∏è [Snippets (Code to Copy)](#snippets)\n6. üîó [Assets](#links)\n7. üöÄ [More](#more)\n\n## üö® Tutorial\n\nThis repository contains the code corresponding to an in-depth tutorial available on our YouTube channel, <a href=\"https://www.youtube.com/@javascriptmastery/videos\" target=\"_blank\"><b>JavaScript Mastery</b></a>.\n\nIf you prefer visual learning, this is the perfect resource for you. Follow our tutorial to learn how to build projects like these step-by-step in a beginner-friendly manner!\n\n<a href=\"https://www.youtube.com/watch?v=8GK8R77Bd7g\" target=\"_blank\"><img src=\"https://github.com/sujatagunale/EasyRead/assets/151519281/1736fca5-a031-4854-8c09-bc110e3bc16d\" /></a>\n\n## <a name=\"introduction\">ü§ñ Introduction</a>\n\nBuilt with Next.js for the user interface and backend logic, Firebase for authentication and data storage, styled with TailwindCSS and using Vapi's voice agents, Prepwise is a website project designed to help you learn integrating AI models with your apps. The platform offers a sleek and modern experience for job interview preparation.\n\nIf you're getting started and need assistance or face any bugs, join our active Discord community with over **50k+** members. It's a place where people help each other out.\n\n<a href=\"https://discord.com/invite/n6EdbFJ\" target=\"_blank\"><img src=\"https://github.com/sujatagunale/EasyRead/assets/151519281/618f4872-1e10-42da-8213-1d69e486d02e\" /></a>\n\n## <a name=\"tech-stack\">‚öôÔ∏è Tech Stack</a>\n\n- Next.js\n- Firebase\n- Tailwind CSS\n- Vapi AI\n- shadcn/ui\n- Google Gemeni\n- Zod\n\n## <a name=\"features\">üîã Features</a>\n\nüëâ **Authentication**: Sign Up and Sign In using password/email authentication handled by Firebase.\n\nüëâ **Create Interviews**: Easily generate job interviews with help of Vapi voice assistants and Google Gemini.\n\nüëâ **Get feedback from AI**: Take the interview with AI voice agent, and receive instant feedback based on your conversation.\n\nüëâ **Modern UI/UX**: A sleek and user-friendly interface designed for a great experience.\n\nüëâ **Interview Page**: Conduct AI-driven interviews with real-time feedback and detailed transcripts.\n\nüëâ **Dashboard**: Manage and track all your interviews with easy navigation.\n\nüëâ **Responsiveness**: Fully responsive design that works seamlessly across devices.\n\nand many more, including code architecture and reusability\n\n## <a name=\"quick-start\">ü§∏ Quick Start</a>\n\nFollow these steps to set up the project locally on your machine.\n\n**Prerequisites**\n\nMake sure you have the following installed on your machine:\n\n- [Git](https://git-scm.com/)\n- [Node.js](https://nodejs.org/en)\n- [npm](https://www.npmjs.com/) (Node Package Manager)\n\n**Cloning the Repository**\n\n```bash\ngit clone https://github.com/adrianhajdin/ai_mock_interviews.git\ncd ai_mock_interviews\n```\n\n**Installation**\n\nInstall the project dependencies using npm:\n\n```bash\nnpm install\n```\n\n**Set Up Environment Variables**\n\nCreate a new file named `.env.local` in the root of your project and add the following content:\n\n```env\nNEXT_PUBLIC_VAPI_WEB_TOKEN=\nNEXT_PUBLIC_VAPI_WORKFLOW_ID=\n\nGOOGLE_GENERATIVE_AI_API_KEY=\n\nNEXT_PUBLIC_BASE_URL=\n\nNEXT_PUBLIC_FIREBASE_API_KEY=\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=\nNEXT_PUBLIC_FIREBASE_APP_ID=\n\nFIREBASE_PROJECT_ID=\nFIREBASE_CLIENT_EMAIL=\nFIREBASE_PRIVATE_KEY=\n```\n\nReplace the placeholder values with your actual **[Firebase](https://firebase.google.com/)**, **[Vapi](https://vapi.ai/?utm_source=youtube&utm_medium=video&utm_campaign=jsmastery_recruitingpractice&utm_content=paid_partner&utm_term=recruitingpractice)** credentials.\n\n**Running the Project**\n\n```bash\nnpm run dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) in your browser to view the project.\n\n## <a name=\"snippets\">üï∏Ô∏è Snippets</a>\n\n<details>\n<summary><code>globals.css</code></summary>\n\n```css\n@import \"tailwindcss\";\n\n@plugin \"tailwindcss-animate\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme {\n  --color-success-100: #49de50;\n  --color-success-200: #42c748;\n  --color-destructive-100: #f75353;\n  --color-destructive-200: #c44141;\n\n  --color-primary-100: #dddfff;\n  --color-primary-200: #cac5fe;\n\n  --color-light-100: #d6e0ff;\n  --color-light-400: #6870a6;\n  --color-light-600: #4f557d;\n  --color-light-800: #24273a;\n\n  --color-dark-100: #020408;\n  --color-dark-200: #27282f;\n  --color-dark-300: #242633;\n\n  --font-mona-sans: \"Mona Sans\", sans-serif;\n\n  --bg-pattern: url(\"/pattern.png\");\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.205 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.205 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.922 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: var(--light-100);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n}\n\n@theme inline {\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n  p {\n    @apply text-light-100;\n  }\n  h2 {\n    @apply text-3xl font-semibold;\n  }\n  h3 {\n    @apply text-2xl font-semibold;\n  }\n  ul {\n    @apply list-disc list-inside;\n  }\n  li {\n    @apply text-light-100;\n  }\n}\n\n@layer components {\n  .btn-call {\n    @apply inline-block px-7 py-3 font-bold text-sm leading-5 text-white transition-colors duration-150 bg-success-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-success-200 hover:bg-success-200 min-w-28 cursor-pointer items-center justify-center overflow-visible;\n\n    .span {\n      @apply bg-success-100 h-[85%] w-[65%];\n    }\n  }\n\n  .btn-disconnect {\n    @apply inline-block px-7 py-3 text-sm font-bold leading-5 text-white transition-colors duration-150 bg-destructive-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-destructive-200 hover:bg-destructive-200 min-w-28;\n  }\n\n  .btn-upload {\n    @apply flex min-h-14 w-full items-center justify-center gap-1.5 rounded-md;\n  }\n  .btn-primary {\n    @apply w-fit !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;\n  }\n  .btn-secondary {\n    @apply w-fit !bg-dark-200 !text-primary-200 hover:!bg-dark-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;\n  }\n\n  .btn-upload {\n    @apply bg-dark-200 rounded-full min-h-12 px-5 cursor-pointer border border-input  overflow-hidden;\n  }\n\n  .card-border {\n    @apply border-gradient p-0.5 rounded-2xl w-fit;\n  }\n\n  .card {\n    @apply dark-gradient rounded-2xl min-h-full;\n  }\n\n  .form {\n    @apply w-full;\n\n    .label {\n      @apply !text-light-100 !font-normal;\n    }\n\n    .input {\n      @apply !bg-dark-200 !rounded-full !min-h-12 !px-5 placeholder:!text-light-100;\n    }\n\n    .btn {\n      @apply !w-full !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !min-h-10 !font-bold !px-5 cursor-pointer;\n    }\n  }\n\n  .call-view {\n    @apply flex sm:flex-row flex-col gap-10 items-center justify-between w-full;\n\n    h3 {\n      @apply text-center text-primary-100 mt-5;\n    }\n\n    .card-interviewer {\n      @apply flex-center flex-col gap-2 p-7 h-[400px] blue-gradient-dark rounded-lg border-2 border-primary-200/50 flex-1 sm:basis-1/2 w-full;\n    }\n\n    .avatar {\n      @apply z-10 flex items-center justify-center blue-gradient rounded-full size-[120px] relative;\n\n      .animate-speak {\n        @apply absolute inline-flex size-5/6 animate-ping rounded-full bg-primary-200 opacity-75;\n      }\n    }\n\n    .card-border {\n      @apply border-gradient p-0.5 rounded-2xl flex-1 sm:basis-1/2 w-full h-[400px] max-md:hidden;\n    }\n\n    .card-content {\n      @apply flex flex-col gap-2 justify-center items-center p-7 dark-gradient rounded-2xl min-h-full;\n    }\n  }\n\n  .transcript-border {\n    @apply border-gradient p-0.5 rounded-2xl w-full;\n\n    .transcript {\n      @apply dark-gradient rounded-2xl  min-h-12 px-5 py-3 flex items-center justify-center;\n\n      p {\n        @apply text-lg text-center text-white;\n      }\n    }\n  }\n\n  .section-feedback {\n    @apply flex flex-col gap-8 max-w-5xl mx-auto max-sm:px-4 text-lg leading-7;\n\n    .buttons {\n      @apply flex w-full justify-evenly gap-4 max-sm:flex-col max-sm:items-center;\n    }\n  }\n\n  .auth-layout {\n    @apply flex items-center justify-center mx-auto max-w-7xl min-h-screen max-sm:px-4 max-sm:py-8;\n  }\n\n  .root-layout {\n    @apply flex mx-auto max-w-7xl flex-col gap-12 my-12 px-16 max-sm:px-4 max-sm:my-8;\n  }\n\n  .card-cta {\n    @apply flex flex-row blue-gradient-dark rounded-3xl px-16 py-6 items-center justify-between max-sm:px-4;\n  }\n\n  .interviews-section {\n    @apply flex flex-wrap gap-4 max-lg:flex-col w-full items-stretch;\n  }\n\n  .interview-text {\n    @apply text-lg text-center text-white;\n  }\n\n  .progress {\n    @apply h-1.5 text-[5px] font-bold bg-primary-200 rounded-full flex-center;\n  }\n\n  .tech-tooltip {\n    @apply absolute bottom-full mb-1 hidden group-hover:flex px-2 py-1 text-xs text-white bg-gray-700 rounded-md shadow-md;\n  }\n\n  .card-interview {\n    @apply dark-gradient rounded-2xl min-h-full flex flex-col p-6 relative overflow-hidden gap-10 justify-between;\n\n    .badge-text {\n      @apply text-sm font-semibold capitalize;\n    }\n  }\n}\n\n@utility dark-gradient {\n  @apply bg-gradient-to-b from-[#1A1C20] to-[#08090D];\n}\n\n@utility border-gradient {\n  @apply bg-gradient-to-b from-[#4B4D4F] to-[#4B4D4F33];\n}\n\n@utility pattern {\n  @apply bg-[url('/pattern.png')] bg-top bg-no-repeat;\n}\n\n@utility blue-gradient-dark {\n  @apply bg-gradient-to-b from-[#171532] to-[#08090D];\n}\n\n@utility blue-gradient {\n  @apply bg-gradient-to-l from-[#FFFFFF] to-[#CAC5FE];\n}\n\n@utility flex-center {\n  @apply flex items-center justify-center;\n}\n\n@utility animate-fadeIn {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(5px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><code>lib/utils.ts</code></summary>\n\n```javascript\nimport { interviewCovers, mappings } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\n\nconst normalizeTechName = (tech: string) => {\n  const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n  return mappings[key as keyof typeof mappings];\n};\n\nconst checkIconExists = async (url: string) => {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.ok; // Returns true if the icon exists\n  } catch {\n    return false;\n  }\n};\n\nexport const getTechLogos = async (techArray: string[]) => {\n  const logoURLs = techArray.map((tech) => {\n    const normalized = normalizeTechName(tech);\n    return {\n      tech,\n      url: `${techIconBaseURL}/${normalized}/${normalized}-original.svg`,\n    };\n  });\n\n  const results = await Promise.all(\n    logoURLs.map(async ({ tech, url }) => ({\n      tech,\n      url: (await checkIconExists(url)) ? url : \"/tech.svg\",\n    }))\n  );\n\n  return results;\n};\n\nexport const getRandomInterviewCover = () => {\n  const randomIndex = Math.floor(Math.random() * interviewCovers.length);\n  return `/covers${interviewCovers[randomIndex]}`;\n};\n\n```\n\n</details>\n\n<details>\n<summary><code>Generate questions prompt (/app/api/vapi/generate/route.tsx):</code></summary>\n\n```javascript\n`Prepare questions for a job interview.\n        The job role is ${role}.\n        The job experience level is ${level}.\n        The tech stack used in the job is: ${techstack}.\n        The focus between behavioural and technical questions should lean towards: ${type}.\n        The amount of questions required is: ${amount}.\n        Please return only the questions, without any additional text.\n        The questions are going to be read by a voice assistant so do not use \"/\" or \"*\" or any other special characters which might break the voice assistant.\n        Return the questions formatted like this:\n        [\"Question 1\", \"Question 2\", \"Question 3\"]\n        \n        Thank you! <3\n    `;\n```\n\n</details>\n\n<details>\n<summary><code>Generate feedback prompt (lib/actions/general.action.ts):</code></summary>\n\n```javascript\nprompt: `\n        You are an AI interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories. Be thorough and detailed in your analysis. Don't be lenient with the candidate. If there are mistakes or areas for improvement, point them out.\n        Transcript:\n        ${formattedTranscript}\n\n        Please score the candidate from 0 to 100 in the following areas. Do not add categories other than the ones provided:\n        - **Communication Skills**: Clarity, articulation, structured responses.\n        - **Technical Knowledge**: Understanding of key concepts for the role.\n        - **Problem-Solving**: Ability to analyze problems and propose solutions.\n        - **Cultural & Role Fit**: Alignment with company values and job role.\n        - **Confidence & Clarity**: Confidence in responses, engagement, and clarity.\n        `,\nsystem:\n        \"You are a professional interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories\",\n```\n\n</details>\n\n<details>\n<summary><code>Display feedback (app/(root)/interview/[id]/feedback/page.tsx):</code></summary>\n\n```javascript\n    <section className=\"section-feedback\">\n      <div className=\"flex flex-row justify-center\">\n        <h1 className=\"text-4xl font-semibold\">\n          Feedback on the Interview -{\" \"}\n          <span className=\"capitalize\">{interview.role}</span> Interview\n        </h1>\n      </div>\n\n      <div className=\"flex flex-row justify-center\">\n        <div className=\"flex flex-row gap-5\">\n          <div className=\"flex flex-row gap-2 items-center\">\n            <Image src=\"/star.svg\" width={22} height={22} alt=\"star\" />\n            <p>\n              Overall Impression:{\" \"}\n              <span className=\"text-primary-200 font-bold\">\n                {feedback?.totalScore}\n              </span>\n              /100\n            </p>\n          </div>\n\n          <div className=\"flex flex-row gap-2\">\n            <Image src=\"/calendar.svg\" width={22} height={22} alt=\"calendar\" />\n            <p>\n              {feedback?.createdAt\n                ? dayjs(feedback.createdAt).format(\"MMM D, YYYY h:mm A\")\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <p>{feedback?.finalAssessment}</p>\n\n      <div className=\"flex flex-col gap-4\">\n        <h2>Breakdown of the Interview:</h2>\n        {feedback?.categoryScores?.map((category, index) => (\n          <div key={index}>\n            <p className=\"font-bold\">\n              {index + 1}. {category.name} ({category.score}/100)\n            </p>\n            <p>{category.comment}</p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex flex-col gap-3\">\n        <h3>Strengths</h3>\n        <ul>\n          {feedback?.strengths?.map((strength, index) => (\n            <li key={index}>{strength}</li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"flex flex-col gap-3\">\n        <h3>Areas for Improvement</h3>\n        <ul>\n          {feedback?.areasForImprovement?.map((area, index) => (\n            <li key={index}>{area}</li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"buttons\">\n        <Button className=\"btn-secondary flex-1\">\n          <Link href=\"/\" className=\"flex w-full justify-center\">\n            <p className=\"text-sm font-semibold text-primary-200 text-center\">\n              Back to dashboard\n            </p>\n          </Link>\n        </Button>\n\n        <Button className=\"btn-primary flex-1\">\n          <Link\n            href={`/interview/${id}`}\n            className=\"flex w-full justify-center\"\n          >\n            <p className=\"text-sm font-semibold text-black text-center\">\n              Retake Interview\n            </p>\n          </Link>\n        </Button>\n      </div>\n    </section>\n```\n\n</details>\n\n<details>\n<summary><code>Dummy Interviews:</code></summary>\n\n```javascript\nexport const dummyInterviews: Interview[] = [\n  {\n    id: \"1\",\n    userId: \"user1\",\n    role: \"Frontend Developer\",\n    type: \"Technical\",\n    techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n  },\n  {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n    type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n    finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n];\n```\n\n</details>\n\n\n## <a name=\"links\">üîó Assets</a>\n\nPublic assets used in the project can be found [here](https://drive.google.com/drive/folders/1DuQ9bHH3D3ZAN_CFKfBgsaB8DEhEdnog?usp=sharing)\n\n## <a name=\"more\">üöÄ More</a>\n\n**Advance your skills with Next.js Pro Course**\n\nEnjoyed creating this project? Dive deeper into our PRO courses for a richer learning adventure. They're packed with\ndetailed explanations, cool features, and exercises to boost your skills. Give it a go!\n\n<a href=\"https://jsmastery.pro/next15\" target=\"_blank\">\n   <img src=\"https://github.com/user-attachments/assets/b8760e69-1f81-4a71-9108-ceeb1de36741\" alt=\"Project Banner\">\n</a>\n","size_bytes":22386},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  // images: {\n  //   remotePatterns: [\n  //     {\n  //       protocol: \"https\",\n  //       hostname: \"ik.imagekit.io\",\n  //       port: \"\",\n  //     },\n  //   ],\n  // },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  async rewrites() {\n    return [];\n  },\n  async headers() {\n    return [\n      {\n        source: \"/(.*)\",\n        headers: [\n          {\n            key: \"X-Frame-Options\",\n            value: \"SAMEORIGIN\",\n          },\n        ],\n      },\n    ];\n  },\n  // Enable experimental features for better host handling\n  // experimental: {\n  //   allowedRevalidateHeaderKeys: [\"*\"],\n  // },\n  // Development server configuration for Replit\n  ...(process.env.NODE_ENV === \"development\" && {\n    async headers() {\n      return [\n        {\n          source: \"/(.*)\",\n          headers: [\n            {\n              key: \"Cache-Control\",\n              value: \"no-cache, no-store, must-revalidate\",\n            },\n            {\n              key: \"X-Frame-Options\",\n              value: \"SAMEORIGIN\",\n            },\n          ],\n        },\n      ];\n    },\n  }),\n};\n\nexport default nextConfig;\n","size_bytes":1251},"replit.md":{"content":"# PrepWise - AI-Powered Interview Practice App\n\n## Overview\nPrepWise is a Next.js application that helps users practice for job interviews using AI-powered feedback and voice interactions. The app uses Firebase for authentication and database, Google AI (Gemini) for generating interview questions, and Vapi AI for voice-based interview simulation.\n\n## Architecture\n- **Frontend**: Next.js 15 with React 19, Tailwind CSS v4\n- **Backend**: Next.js API routes\n- **Authentication**: Firebase Auth\n- **Database**: Firebase Firestore\n- **AI Services**: Google Gemini for question generation, Vapi AI for voice interactions\n- **Deployment**: Configured for Replit autoscale deployment\n\n## Current Status\n- ‚úÖ Dependencies installed and configured\n- ‚úÖ Development server running on port 5000\n- ‚úÖ Tailwind CSS v4 configured with custom styling\n- ‚úÖ Next.js configured for Replit proxy support\n- ‚úÖ Firebase integrations added (blueprint)\n- ‚úÖ Google AI integration added (blueprint)\n- ‚úÖ Error handling for missing environment variables\n- ‚úÖ Deployment configuration set up\n\n## Required Environment Variables\nThe following environment variables need to be configured for full functionality:\n\n### Firebase Client (NEXT_PUBLIC_*)\n- NEXT_PUBLIC_FIREBASE_API_KEY\n- NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\n- NEXT_PUBLIC_FIREBASE_PROJECT_ID\n- NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET\n- NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID\n- NEXT_PUBLIC_FIREBASE_APP_ID\n- NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\n\n### Firebase Admin\n- FIREBASE_PROJECT_ID\n- FIREBASE_CLIENT_EMAIL\n- FIREBASE_PRIVATE_KEY\n\n### AI Services\n- GEMINI_API_KEY (Google AI)\n- NEXT_PUBLIC_VAPI_WEB_TOKEN (Vapi AI)\n- NEXT_PUBLIC_VAPI_WORKFLOW_ID (Vapi AI)\n\n## Setup Instructions\n1. The app is ready to run with demo configuration\n2. For production use, configure the Firebase and AI service environment variables\n3. The app gracefully handles missing configurations with appropriate error messages\n4. Deployment is configured for autoscale on Replit\n\n## Recent Changes (Import Setup)\n- Updated Next.js config for Replit compatibility\n- Added error handling for database operations\n- Fixed authentication flow\n- Configured deployment settings\n- Added comprehensive environment variable documentation\n\n## Development\n- Run `npm run dev` to start development server\n- Server runs on 0.0.0.0:5000 for Replit compatibility\n- Hot reload enabled with Turbopack","size_bytes":2391},"app/globals.css":{"content":"@import \"tailwindcss\";\n\n@plugin \"tailwindcss-animate\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme {\n  --color-success-100: #49de50;\n  --color-success-200: #42c748;\n  --color-destructive-100: #f75353;\n  --color-destructive-200: #c44141;\n\n  --color-primary-100: #dddfff;\n  --color-primary-200: #cac5fe;\n\n  --color-light-100: #d6e0ff;\n  --color-light-400: #6870a6;\n  --color-light-600: #4f557d;\n  --color-light-800: #24273a;\n\n  --color-dark-100: #020408;\n  --color-dark-200: #27282f;\n  --color-dark-300: #242633;\n\n  --font-mona-sans: \"Mona Sans\", sans-serif;\n\n  --bg-pattern: url(\"/pattern.png\");\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.205 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.205 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.922 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: var(--light-100);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n}\n\n@theme inline {\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n  p {\n    @apply text-light-100;\n  }\n  h2 {\n    @apply text-3xl font-semibold;\n  }\n  h3 {\n    @apply text-2xl font-semibold;\n  }\n  ul {\n    @apply list-disc list-inside;\n  }\n  li {\n    @apply text-light-100;\n  }\n}\n\n@layer components {\n  .btn-call {\n    @apply inline-block px-7 py-3 font-bold text-sm leading-5 text-white transition-colors duration-150 bg-success-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-success-200 hover:bg-success-200 min-w-28 cursor-pointer items-center justify-center overflow-visible;\n\n    .span {\n      @apply bg-success-100 h-[85%] w-[65%];\n    }\n  }\n\n  .btn-disconnect {\n    @apply inline-block px-7 py-3 text-sm font-bold leading-5 text-white transition-colors duration-150 bg-destructive-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-destructive-200 hover:bg-destructive-200 min-w-28;\n  }\n\n  .btn-upload {\n    @apply flex min-h-14 w-full items-center justify-center gap-1.5 rounded-md;\n  }\n  .btn-primary {\n    @apply w-fit !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;\n  }\n  .btn-secondary {\n    @apply w-fit !bg-dark-200 !text-primary-200 hover:!bg-dark-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;\n  }\n\n  .btn-upload {\n    @apply bg-dark-200 rounded-full min-h-12 px-5 cursor-pointer border border-input  overflow-hidden;\n  }\n\n  .card-border {\n    @apply border-gradient p-0.5 rounded-2xl w-fit;\n  }\n\n  .card {\n    @apply dark-gradient rounded-2xl min-h-full;\n  }\n\n  .form {\n    @apply w-full;\n\n    .label {\n      @apply !text-light-100 !font-normal;\n    }\n\n    .input {\n      @apply !bg-dark-200 !rounded-full !min-h-12 !px-5 placeholder:!text-light-100;\n    }\n\n    .btn {\n      @apply !w-full !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !min-h-10 !font-bold !px-5 cursor-pointer;\n    }\n  }\n\n  .call-view {\n    @apply flex sm:flex-row flex-col gap-10 items-center justify-between w-full;\n\n    h3 {\n      @apply text-center text-primary-100 mt-5;\n    }\n\n    .card-interviewer {\n      @apply flex-center flex-col gap-2 p-7 h-[400px] blue-gradient-dark rounded-lg border-2 border-primary-200/50 flex-1 sm:basis-1/2 w-full;\n    }\n\n    .avatar {\n      @apply z-10 flex items-center justify-center blue-gradient rounded-full size-[120px] relative;\n\n      .animate-speak {\n        @apply absolute inline-flex size-5/6 animate-ping rounded-full bg-primary-200 opacity-75;\n      }\n    }\n\n    .card-border {\n      @apply border-gradient p-0.5 rounded-2xl flex-1 sm:basis-1/2 w-full h-[400px] max-md:hidden;\n    }\n\n    .card-content {\n      @apply flex flex-col gap-2 justify-center items-center p-7 dark-gradient rounded-2xl min-h-full;\n    }\n  }\n\n  .transcript-border {\n    @apply border-gradient p-0.5 rounded-2xl w-full;\n\n    .transcript {\n      @apply dark-gradient rounded-2xl  min-h-12 px-5 py-3 flex items-center justify-center;\n\n      p {\n        @apply text-lg text-center text-white;\n      }\n    }\n  }\n\n  .section-feedback {\n    @apply flex flex-col gap-8 max-w-5xl mx-auto max-sm:px-4 text-lg leading-7;\n\n    .buttons {\n      @apply flex w-full justify-evenly gap-4 max-sm:flex-col max-sm:items-center;\n    }\n  }\n\n  .auth-layout {\n    @apply flex items-center justify-center mx-auto max-w-7xl min-h-screen max-sm:px-4 max-sm:py-8;\n  }\n\n  .root-layout {\n    @apply flex mx-auto max-w-7xl flex-col gap-12 my-12 px-16 max-sm:px-4 max-sm:my-8;\n  }\n\n  .card-cta {\n    @apply flex flex-row blue-gradient-dark rounded-3xl px-16 py-6 items-center justify-between max-sm:px-4;\n  }\n\n  .interviews-section {\n    @apply flex flex-wrap gap-4 max-lg:flex-col w-full items-stretch;\n  }\n\n  .interview-text {\n    @apply text-lg text-center text-white;\n  }\n\n  .progress {\n    @apply h-1.5 text-[5px] font-bold bg-primary-200 rounded-full flex-center;\n  }\n\n  .tech-tooltip {\n    @apply absolute bottom-full mb-1 hidden group-hover:flex px-2 py-1 text-xs text-white bg-gray-700 rounded-md shadow-md;\n  }\n\n  .card-interview {\n    @apply dark-gradient rounded-2xl min-h-full flex flex-col p-6 relative overflow-hidden gap-10 justify-between;\n\n    .badge-text {\n      @apply text-sm font-semibold capitalize;\n    }\n  }\n}\n\n@utility dark-gradient {\n  @apply bg-gradient-to-b from-[#1A1C20] to-[#08090D];\n}\n\n@utility border-gradient {\n  @apply bg-gradient-to-b from-[#4B4D4F] to-[#4B4D4F33];\n}\n\n@utility pattern {\n  @apply bg-[url('/pattern.png')] bg-top bg-no-repeat;\n}\n\n@utility blue-gradient-dark {\n  @apply bg-gradient-to-b from-[#171532] to-[#08090D];\n}\n\n@utility blue-gradient {\n  @apply bg-gradient-to-l from-[#FFFFFF] to-[#CAC5FE];\n}\n\n@utility flex-center {\n  @apply flex items-center justify-center;\n}\n\n@utility animate-fadeIn {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(5px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n","size_bytes":9545},"app/layout.tsx":{"content":"import { Toaster } from \"sonner\";\nimport type { Metadata } from \"next\";\nimport { Mona_Sans } from \"next/font/google\";\n\nimport \"./globals.css\";\n\nconst monaSans = Mona_Sans({\n  variable: \"--font-mona-sans\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Your Interviewer\",\n  description: \"An AI-powered platform for preparing for mock interviews\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <body className={`${monaSans.className} antialiased pattern`}>\n        {children}\n\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n","size_bytes":665},"components/Agent.tsx":{"content":"\"use client\";\n\nimport Image from \"next/image\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nimport { cn } from \"@/lib/utils\";\nimport { vapi } from \"@/lib/vapi.sdk\";\nimport { interviewer } from \"@/constants\";\nimport { createFeedback } from \"@/lib/actions/general.action\";\n\nenum CallStatus {\n  INACTIVE = \"INACTIVE\",\n  CONNECTING = \"CONNECTING\",\n  ACTIVE = \"ACTIVE\",\n  FINISHED = \"FINISHED\",\n}\n\ninterface SavedMessage {\n  role: \"user\" | \"system\" | \"assistant\";\n  content: string;\n}\n\nconst Agent = ({\n  userName,\n  userId,\n  interviewId,\n  feedbackId,\n  type,\n  questions,\n}: AgentProps) => {\n  const router = useRouter();\n  const [callStatus, setCallStatus] = useState<CallStatus>(CallStatus.INACTIVE);\n  const [messages, setMessages] = useState<SavedMessage[]>([]);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [lastMessage, setLastMessage] = useState<string>(\"\");\n\n  useEffect(() => {\n    const onCallStart = () => {\n      setCallStatus(CallStatus.ACTIVE);\n    };\n\n    const onCallEnd = () => {\n      setCallStatus(CallStatus.FINISHED);\n    };\n\n    const onMessage = (message: Message) => {\n      if (message.type === \"transcript\" && message.transcriptType === \"final\") {\n        const newMessage = { role: message.role, content: message.transcript };\n        setMessages((prev) => [...prev, newMessage]);\n      }\n    };\n\n    const onSpeechStart = () => {\n      console.log(\"speech start\");\n      setIsSpeaking(true);\n    };\n\n    const onSpeechEnd = () => {\n      console.log(\"speech end\");\n      setIsSpeaking(false);\n    };\n\n    const onError = (error: Error) => {\n      console.log(\"Error:\", error);\n    };\n\n    vapi.on(\"call-start\", onCallStart);\n    vapi.on(\"call-end\", onCallEnd);\n    vapi.on(\"message\", onMessage);\n    vapi.on(\"speech-start\", onSpeechStart);\n    vapi.on(\"speech-end\", onSpeechEnd);\n    vapi.on(\"error\", onError);\n\n    return () => {\n      vapi.off(\"call-start\", onCallStart);\n      vapi.off(\"call-end\", onCallEnd);\n      vapi.off(\"message\", onMessage);\n      vapi.off(\"speech-start\", onSpeechStart);\n      vapi.off(\"speech-end\", onSpeechEnd);\n      vapi.off(\"error\", onError);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (messages.length > 0) {\n      setLastMessage(messages[messages.length - 1].content);\n    }\n\n    const handleGenerateFeedback = async (messages: SavedMessage[]) => {\n      console.log(\"handleGenerateFeedback\");\n\n      const { success, feedbackId: id } = await createFeedback({\n        interviewId: interviewId!,\n        userId: userId!,\n        transcript: messages,\n        feedbackId,\n      });\n\n      if (success && id) {\n        router.push(`/interview/${interviewId}/feedback`);\n      } else {\n        console.log(\"Error saving feedback\");\n        router.push(\"/\");\n      }\n    };\n\n    if (callStatus === CallStatus.FINISHED) {\n      if (type === \"generate\") {\n        router.push(\"/\");\n      } else {\n        handleGenerateFeedback(messages);\n      }\n    }\n  }, [messages, callStatus, feedbackId, interviewId, router, type, userId]);\n\n  const handleCall = async () => {\n    setCallStatus(CallStatus.CONNECTING);\n\n    if (type === \"generate\") {\n      await vapi.start(process.env.NEXT_PUBLIC_VAPI_WORKFLOW_ID!, {\n        variableValues: {\n          username: userName,\n          userid: userId,\n        },\n      });\n    } else {\n      let formattedQuestions = \"\";\n      if (questions) {\n        formattedQuestions = questions\n          .map((question) => `- ${question}`)\n          .join(\"\\n\");\n      }\n\n      await vapi.start(interviewer, {\n        variableValues: {\n          questions: formattedQuestions,\n        },\n      });\n    }\n  };\n\n  const handleDisconnect = () => {\n    setCallStatus(CallStatus.FINISHED);\n    vapi.stop();\n  };\n\n  return (\n    <>\n      <div className=\"call-view\">\n        {/* AI Interviewer Card */}\n        <div className=\"card-interviewer\">\n          <div className=\"avatar\">\n            <Image\n              src=\"/ai-avatar.png\"\n              alt=\"profile-image\"\n              width={65}\n              height={54}\n              className=\"object-cover\"\n            />\n            {isSpeaking && <span className=\"animate-speak\" />}\n          </div>\n          <h3>AI Interviewer</h3>\n        </div>\n\n        {/* User Profile Card */}\n        <div className=\"card-border\">\n          <div className=\"card-content\">\n            <Image\n              src=\"/user-avatar.png\"\n              alt=\"profile-image\"\n              width={539}\n              height={539}\n              className=\"rounded-full object-cover size-[120px]\"\n            />\n            <h3>{userName}</h3>\n          </div>\n        </div>\n      </div>\n\n      {messages.length > 0 && (\n        <div className=\"transcript-border\">\n          <div className=\"transcript\">\n            <p\n              key={lastMessage}\n              className={cn(\n                \"transition-opacity duration-500 opacity-0\",\n                \"animate-fadeIn opacity-100\"\n              )}\n            >\n              {lastMessage}\n            </p>\n          </div>\n        </div>\n      )}\n\n      <div className=\"w-full flex justify-center\">\n        {callStatus !== \"ACTIVE\" ? (\n          <button className=\"relative btn-call\" onClick={() => handleCall()}>\n            <span\n              className={cn(\n                \"absolute animate-ping rounded-full opacity-75\",\n                callStatus !== \"CONNECTING\" && \"hidden\"\n              )}\n            />\n\n            <span className=\"relative\">\n              {callStatus === \"INACTIVE\" || callStatus === \"FINISHED\"\n                ? \"Call\"\n                : \". . .\"}\n            </span>\n          </button>\n        ) : (\n          <button className=\"btn-disconnect\" onClick={() => handleDisconnect()}>\n            End\n          </button>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Agent;\n","size_bytes":5835},"components/AuthForm.tsx":{"content":"\"use client\";\n\nimport { z } from \"zod\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { toast } from \"sonner\";\nimport { auth } from \"@/firebase/client\";\nimport { useForm } from \"react-hook-form\";\nimport { useRouter } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\n\nimport { Form } from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { signIn, signUp } from \"@/lib/actions/auth.action\";\nimport FormField from \"./FormField\";\n\nconst authFormSchema = (type: FormType) => {\n  return z.object({\n    name: type === \"sign-up\" ? z.string().min(3) : z.string().optional(),\n    email: z.string().email(),\n    password: z.string().min(3),\n  });\n};\n\nconst AuthForm = ({ type }: { type: FormType }) => {\n  const router = useRouter();\n\n  const formSchema = authFormSchema(type);\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    try {\n      if (type === \"sign-up\") {\n        const { name, email, password } = data;\n\n        const userCredential = await createUserWithEmailAndPassword(\n          auth,\n          email,\n          password\n        );\n\n        const result = await signUp({\n          uid: userCredential.user.uid,\n          name: name!,\n          email,\n          password,\n        });\n\n        if (!result.success) {\n          toast.error(result.message);\n          return;\n        }\n\n        toast.success(\"Account created successfully. Please sign in.\");\n        router.push(\"/sign-in\");\n      } else {\n        const { email, password } = data;\n\n        const userCredential = await signInWithEmailAndPassword(\n          auth,\n          email,\n          password\n        );\n\n        const idToken = await userCredential.user.getIdToken();\n        if (!idToken) {\n          toast.error(\"Sign in Failed. Please try again.\");\n          return;\n        }\n\n        const result = await signIn({\n          email,\n          idToken,\n        });\n\n        if (!result.success) {\n          toast.error(result.message);\n          return;\n        }\n\n        toast.success(\"Signed in successfully.\");\n        router.push(\"/\");\n      }\n    } catch (error) {\n      console.log(error);\n      toast.error(`There was an error: ${error}`);\n    }\n  };\n\n  const isSignIn = type === \"sign-in\";\n\n  return (\n    <div className=\"card-border lg:min-w-[566px]\">\n      <div className=\"flex flex-col gap-6 card py-14 px-10\">\n        <div className=\"flex flex-row gap-2 justify-center\">\n          <Image src=\"/logo.svg\" alt=\"logo\" height={32} width={38} />\n          <h2 className=\"text-primary-100\">Your Interviewer</h2>\n        </div>\n\n        <h3>Practice job interviews with AI</h3>\n\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className=\"w-full space-y-6 mt-4 form\"\n          >\n            {!isSignIn && (\n              <FormField\n                control={form.control}\n                name=\"name\"\n                label=\"Name\"\n                placeholder=\"Your Name\"\n                type=\"text\"\n                autoComplete=\"name\"\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              label=\"Email\"\n              placeholder=\"Your email address\"\n              type=\"email\"\n              autoComplete={isSignIn ? \"username\" : \"email\"}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              label=\"Password\"\n              placeholder=\"Enter your password\"\n              type=\"password\"\n              autoComplete={isSignIn ? \"current-password\" : \"new-password\"}\n            />\n\n            <Button className=\"btn\" type=\"submit\">\n              {isSignIn ? \"Sign In\" : \"Create an Account\"}\n            </Button>\n          </form>\n        </Form>\n\n        <p className=\"text-center\">\n          {isSignIn ? \"No account yet?\" : \"Have an account already?\"}\n          <Link\n            href={!isSignIn ? \"/sign-in\" : \"/sign-up\"}\n            className=\"font-bold text-user-primary ml-1\"\n          >\n            {!isSignIn ? \"Sign In\" : \"Sign Up\"}\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthForm;\n","size_bytes":4493},"components/DisplayTechIcons.tsx":{"content":"import Image from \"next/image\";\n\nimport { cn, getTechLogos } from \"@/lib/utils\";\n\nconst DisplayTechIcons = async ({ techStack }: TechIconProps) => {\n  const techIcons = await getTechLogos(techStack);\n\n  return (\n    <div className=\"flex flex-row\">\n      {techIcons.slice(0, 3).map(({ tech, url }, index) => (\n        <div\n          key={tech}\n          className={cn(\n            \"relative group bg-dark-300 rounded-full p-2 flex flex-center\",\n            index >= 1 && \"-ml-3\"\n          )}\n        >\n          <span className=\"tech-tooltip\">{tech}</span>\n\n          <Image\n            src={url}\n            alt={tech}\n            width={100}\n            height={100}\n            className=\"size-5\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default DisplayTechIcons;\n","size_bytes":790},"components/FormField.tsx":{"content":"import { Controller, Control, FieldValues, Path } from \"react-hook-form\";\n\nimport {\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface FormFieldProps<T extends FieldValues> {\n  control: Control<T>;\n  name: Path<T>;\n  label: string;\n  placeholder?: string;\n  type?: \"text\" | \"email\" | \"password\";\n  autoComplete?: string;\n}\n\nconst FormField = <T extends FieldValues>({\n  control,\n  name,\n  label,\n  placeholder,\n  type = \"text\",\n  autoComplete,\n}: FormFieldProps<T>) => {\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className=\"label\">{label}</FormLabel>\n          <FormControl>\n            <Input\n              className=\"input\"\n              type={type}\n              placeholder={placeholder}\n              autoComplete={autoComplete}\n              {...field}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n\nexport default FormField;\n","size_bytes":1087},"components/InterviewCard.tsx":{"content":"import dayjs from \"dayjs\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\nimport { Button } from \"./ui/button\";\nimport DisplayTechIcons from \"./DisplayTechIcons\";\n\nimport { cn, getRandomInterviewCover } from \"@/lib/utils\";\nimport { getFeedbackByInterviewId } from \"@/lib/actions/general.action\";\n\nconst InterviewCard = async ({\n  interviewId,\n  userId,\n  role,\n  type,\n  techstack,\n  createdAt,\n}: InterviewCardProps) => {\n  const feedback =\n    userId && interviewId\n      ? await getFeedbackByInterviewId({\n          interviewId,\n          userId,\n        })\n      : null;\n\n  const normalizedType = /mix/gi.test(type) ? \"Mixed\" : type;\n\n  const badgeColor =\n    {\n      Behavioral: \"bg-light-400\",\n      Mixed: \"bg-light-600\",\n      Technical: \"bg-light-800\",\n    }[normalizedType] || \"bg-light-600\";\n\n  const formattedDate = dayjs(\n    feedback?.createdAt || createdAt || Date.now()\n  ).format(\"MMM D, YYYY\");\n\n  return (\n    <div className=\"card-border w-[360px] max-sm:w-full min-h-96\">\n      <div className=\"card-interview\">\n        <div>\n          {/* Type Badge */}\n          <div\n            className={cn(\n              \"absolute top-0 right-0 w-fit px-4 py-2 rounded-bl-lg\",\n              badgeColor\n            )}\n          >\n            <p className=\"badge-text \">{normalizedType}</p>\n          </div>\n\n          {/* Cover Image */}\n          <Image\n            src={getRandomInterviewCover()}\n            alt=\"cover-image\"\n            width={90}\n            height={90}\n            className=\"rounded-full object-fit size-[90px]\"\n          />\n\n          {/* Interview Role */}\n          <h3 className=\"mt-5 capitalize\">{role} Interview</h3>\n\n          {/* Date & Score */}\n          <div className=\"flex flex-row gap-5 mt-3\">\n            <div className=\"flex flex-row gap-2\">\n              <Image\n                src=\"/calendar.svg\"\n                width={22}\n                height={22}\n                alt=\"calendar\"\n              />\n              <p>{formattedDate}</p>\n            </div>\n\n            <div className=\"flex flex-row gap-2 items-center\">\n              <Image src=\"/star.svg\" width={22} height={22} alt=\"star\" />\n              <p>{feedback?.totalScore || \"---\"}/100</p>\n            </div>\n          </div>\n\n          {/* Feedback or Placeholder Text */}\n          <p className=\"line-clamp-2 mt-5\">\n            {feedback?.finalAssessment ||\n              \"You haven't taken this interview yet. Take it now to improve your skills.\"}\n          </p>\n        </div>\n\n        <div className=\"flex flex-row justify-between\">\n          <DisplayTechIcons techStack={techstack} />\n\n          <Button className=\"btn-primary\">\n            <Link\n              href={\n                feedback\n                  ? `/interview/${interviewId}/feedback`\n                  : `/interview/${interviewId}`\n              }\n            >\n              {feedback ? \"Check Feedback\" : \"View Interview\"}\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InterviewCard;\n","size_bytes":3042},"constants/index.ts":{"content":"import { CreateAssistantDTO } from \"@vapi-ai/web/dist/api\";\nimport { z } from \"zod\";\n\nexport const mappings = {\n  \"react.js\": \"react\",\n  reactjs: \"react\",\n  react: \"react\",\n  \"next.js\": \"nextjs\",\n  nextjs: \"nextjs\",\n  next: \"nextjs\",\n  \"vue.js\": \"vuejs\",\n  vuejs: \"vuejs\",\n  vue: \"vuejs\",\n  \"express.js\": \"express\",\n  expressjs: \"express\",\n  express: \"express\",\n  \"node.js\": \"nodejs\",\n  nodejs: \"nodejs\",\n  node: \"nodejs\",\n  mongodb: \"mongodb\",\n  mongo: \"mongodb\",\n  mongoose: \"mongoose\",\n  mysql: \"mysql\",\n  postgresql: \"postgresql\",\n  sqlite: \"sqlite\",\n  firebase: \"firebase\",\n  docker: \"docker\",\n  kubernetes: \"kubernetes\",\n  aws: \"aws\",\n  azure: \"azure\",\n  gcp: \"gcp\",\n  digitalocean: \"digitalocean\",\n  heroku: \"heroku\",\n  photoshop: \"photoshop\",\n  \"adobe photoshop\": \"photoshop\",\n  html5: \"html5\",\n  html: \"html5\",\n  css3: \"css3\",\n  css: \"css3\",\n  sass: \"sass\",\n  scss: \"sass\",\n  less: \"less\",\n  tailwindcss: \"tailwindcss\",\n  tailwind: \"tailwindcss\",\n  bootstrap: \"bootstrap\",\n  jquery: \"jquery\",\n  typescript: \"typescript\",\n  ts: \"typescript\",\n  javascript: \"javascript\",\n  js: \"javascript\",\n  \"angular.js\": \"angular\",\n  angularjs: \"angular\",\n  angular: \"angular\",\n  \"ember.js\": \"ember\",\n  emberjs: \"ember\",\n  ember: \"ember\",\n  \"backbone.js\": \"backbone\",\n  backbonejs: \"backbone\",\n  backbone: \"backbone\",\n  nestjs: \"nestjs\",\n  graphql: \"graphql\",\n  \"graph ql\": \"graphql\",\n  apollo: \"apollo\",\n  webpack: \"webpack\",\n  babel: \"babel\",\n  \"rollup.js\": \"rollup\",\n  rollupjs: \"rollup\",\n  rollup: \"rollup\",\n  \"parcel.js\": \"parcel\",\n  parceljs: \"parcel\",\n  npm: \"npm\",\n  yarn: \"yarn\",\n  git: \"git\",\n  github: \"github\",\n  gitlab: \"gitlab\",\n  bitbucket: \"bitbucket\",\n  figma: \"figma\",\n  prisma: \"prisma\",\n  redux: \"redux\",\n  flux: \"flux\",\n  redis: \"redis\",\n  selenium: \"selenium\",\n  cypress: \"cypress\",\n  jest: \"jest\",\n  mocha: \"mocha\",\n  chai: \"chai\",\n  karma: \"karma\",\n  vuex: \"vuex\",\n  \"nuxt.js\": \"nuxt\",\n  nuxtjs: \"nuxt\",\n  nuxt: \"nuxt\",\n  strapi: \"strapi\",\n  wordpress: \"wordpress\",\n  contentful: \"contentful\",\n  netlify: \"netlify\",\n  vercel: \"vercel\",\n  \"aws amplify\": \"amplify\",\n};\n\n// Interview domains with their configurations\nexport const interviewDomains = [\n  {\n    id: \"frontend\",\n    name: \"Frontend Development\",\n    description: \"React, Vue, Angular, HTML, CSS, JavaScript\",\n    icon: \"üíª\",\n    techStack: [\"React\", \"JavaScript\", \"HTML\", \"CSS\", \"TypeScript\"],\n    commonRoles: [\"Frontend Developer\", \"React Developer\", \"UI Developer\"],\n    color: \"bg-blue-500\"\n  },\n  {\n    id: \"backend\",\n    name: \"Backend Development\", \n    description: \"Node.js, Python, Java, APIs, Databases\",\n    icon: \"üîß\",\n    techStack: [\"Node.js\", \"Express\", \"MongoDB\", \"PostgreSQL\", \"Python\"],\n    commonRoles: [\"Backend Developer\", \"API Developer\", \"Server Engineer\"],\n    color: \"bg-green-500\"\n  },\n  {\n    id: \"fullstack\",\n    name: \"Full Stack Development\",\n    description: \"End-to-end web development\",\n    icon: \"‚ö°\",\n    techStack: [\"React\", \"Node.js\", \"MongoDB\", \"Express\", \"JavaScript\"],\n    commonRoles: [\"Full Stack Developer\", \"Software Engineer\"],\n    color: \"bg-purple-500\"\n  },\n  {\n    id: \"mobile\",\n    name: \"Mobile Development\",\n    description: \"React Native, Flutter, iOS, Android\",\n    icon: \"üì±\",\n    techStack: [\"React Native\", \"Flutter\", \"Swift\", \"Kotlin\", \"Dart\"],\n    commonRoles: [\"Mobile Developer\", \"iOS Developer\", \"Android Developer\"],\n    color: \"bg-pink-500\"\n  },\n  {\n    id: \"devops\",\n    name: \"DevOps & Cloud\",\n    description: \"AWS, Docker, Kubernetes, CI/CD\",\n    icon: \"‚òÅÔ∏è\",\n    techStack: [\"AWS\", \"Docker\", \"Kubernetes\", \"Jenkins\", \"Terraform\"],\n    commonRoles: [\"DevOps Engineer\", \"Cloud Engineer\", \"Site Reliability Engineer\"],\n    color: \"bg-orange-500\"\n  },\n  {\n    id: \"data\",\n    name: \"Data Science & ML\",\n    description: \"Python, Machine Learning, Analytics\",\n    icon: \"üìä\",\n    techStack: [\"Python\", \"TensorFlow\", \"Pandas\", \"SQL\", \"Jupyter\"],\n    commonRoles: [\"Data Scientist\", \"ML Engineer\", \"Data Analyst\"],\n    color: \"bg-indigo-500\"\n  },\n  {\n    id: \"product\",\n    name: \"Product Management\",\n    description: \"Strategy, Requirements, User Experience\",\n    icon: \"üéØ\",\n    techStack: [\"Analytics\", \"Figma\", \"Jira\", \"Product Strategy\"],\n    commonRoles: [\"Product Manager\", \"Product Owner\", \"Business Analyst\"],\n    color: \"bg-red-500\"\n  },\n  {\n    id: \"design\",\n    name: \"UI/UX Design\",\n    description: \"User Experience, Interface Design\",\n    icon: \"üé®\",\n    techStack: [\"Figma\", \"Adobe XD\", \"Sketch\", \"Photoshop\", \"Principle\"],\n    commonRoles: [\"UX Designer\", \"UI Designer\", \"Product Designer\"],\n    color: \"bg-teal-500\"\n  }\n];\n\nexport const interviewer: CreateAssistantDTO = {\n  name: \"Interviewer\",\n  firstMessage:\n    \"Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.\",\n  transcriber: {\n    provider: \"deepgram\",\n    model: \"nova-2\",\n    language: \"en\",\n  },\n  voice: {\n    provider: \"11labs\",\n    voiceId: \"sarah\",\n    stability: 0.4,\n    similarityBoost: 0.8,\n    speed: 0.9,\n    style: 0.5,\n    useSpeakerBoost: true,\n  },\n  model: {\n    provider: \"openai\",\n    model: \"gpt-4\",\n    messages: [\n      {\n        role: \"system\",\n        content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.\n\nInterview Guidelines:\nFollow the structured question flow:\n{{questions}}\n\nEngage naturally & react appropriately:\nListen actively to responses and acknowledge them before moving forward.\nAsk brief follow-up questions if a response is vague or requires more detail.\nKeep the conversation flowing smoothly while maintaining control.\nBe professional, yet warm and welcoming:\n\nUse official yet friendly language.\nKeep responses concise and to the point (like in a real voice interview).\nAvoid robotic phrasing‚Äîsound natural and conversational.\nAnswer the candidate‚Äôs questions professionally:\n\nIf asked about the role, company, or expectations, provide a clear and relevant answer.\nIf unsure, redirect the candidate to HR for more details.\n\nConclude the interview properly:\nThank the candidate for their time.\nInform them that the company will reach out soon with feedback.\nEnd the conversation on a polite and positive note.\n\n\n- Be sure to be professional and polite.\n- Keep all your responses short and simple. Use official language, but be kind and welcoming.\n- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,\n      },\n    ],\n  },\n};\n\nexport const feedbackSchema = z.object({\n  totalScore: z.number(),\n  categoryScores: z.tuple([\n    z.object({\n      name: z.literal(\"Communication Skills\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Technical Knowledge\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Problem Solving\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Cultural Fit\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Confidence and Clarity\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n  ]),\n  strengths: z.array(z.string()),\n  areasForImprovement: z.array(z.string()),\n  finalAssessment: z.string(),\n});\n\nexport const interviewCovers = [\n  \"/adobe.png\",\n  \"/amazon.png\",\n  \"/facebook.png\",\n  \"/hostinger.png\",\n  \"/pinterest.png\",\n  \"/quora.png\",\n  \"/reddit.png\",\n  \"/skype.png\",\n  \"/spotify.png\",\n  \"/telegram.png\",\n  \"/tiktok.png\",\n  \"/yahoo.png\",\n];\n\nexport const dummyInterviews: Interview[] = [\n  {\n    id: \"1\",\n    userId: \"user1\",\n    role: \"Frontend Developer\",\n    type: \"Technical\",\n    techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n  },\n  {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n    type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n    finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n];\n","size_bytes":8239},"firebase/admin.ts":{"content":"import { initializeApp, getApps, cert, applicationDefault } from \"firebase-admin/app\";\nimport { getAuth } from \"firebase-admin/auth\";\nimport { getFirestore } from \"firebase-admin/firestore\";\n\n// Initialize Firebase Admin SDK\nfunction initFirebaseAdmin() {\n  const apps = getApps();\n\n  if (!apps.length) {\n    // Check if we have all required environment variables\n    const projectId = process.env.FIREBASE_PROJECT_ID;\n    const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;\n    const privateKey = process.env.FIREBASE_PRIVATE_KEY;\n\n    if (!projectId || !clientEmail || !privateKey) {\n      console.warn(\"Firebase Admin not properly configured - missing environment variables\");\n      // Initialize with minimal config for development\n      try {\n        initializeApp({\n          projectId: projectId || \"demo-project\",\n        });\n      } catch (error) {\n        console.error(\"Failed to initialize Firebase Admin:\", error);\n        return null;\n      }\n    } else {\n      try {\n        // Properly format the private key\n        let formattedPrivateKey = privateKey;\n        \n        // Remove any surrounding quotes\n        formattedPrivateKey = formattedPrivateKey.replace(/^[\"']|[\"']$/g, \"\");\n        \n        // Replace escaped newlines with actual newlines\n        formattedPrivateKey = formattedPrivateKey.replace(/\\\\n/g, \"\\n\");\n        \n        // Ensure proper PEM format\n        if (!formattedPrivateKey.includes(\"-----BEGIN PRIVATE KEY-----\")) {\n          console.error(\"Private key missing PEM headers. Please check your FIREBASE_PRIVATE_KEY format.\");\n          throw new Error(\"Invalid private key format\");\n        }\n        \n        initializeApp({\n          credential: cert({\n            projectId,\n            clientEmail,\n            privateKey: formattedPrivateKey,\n          }),\n        });\n        \n        console.log(\"Firebase Admin initialized successfully with credentials\");\n      } catch (error) {\n        console.error(\"Failed to initialize Firebase Admin with credentials:\", error);\n        console.log(\"Falling back to basic initialization without authentication\");\n        // Fallback to basic initialization\n        try {\n          initializeApp({\n            projectId: projectId || \"demo-project\",\n          });\n        } catch (fallbackError) {\n          console.error(\"Fallback initialization also failed:\", fallbackError);\n          return null;\n        }\n      }\n    }\n  }\n\n  try {\n    return {\n      auth: getAuth(),\n      db: getFirestore(),\n    };\n  } catch (error) {\n    console.error(\"Failed to get Firebase services:\", error);\n    return null;\n  }\n}\n\nconst firebaseAdmin = initFirebaseAdmin();\n\nexport const auth = firebaseAdmin?.auth || null;\nexport const db = firebaseAdmin?.db || null;\n","size_bytes":2741},"firebase/client.ts":{"content":"// Import the functions you need from the SDKs you need\nimport { getApp, getApps, initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\n// const analytics = getAnalytics(app);\n\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n","size_bytes":1167},"lib/utils.ts":{"content":"import { interviewCovers, mappings } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\n\nconst normalizeTechName = (tech: string) => {\n  const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n  return mappings[key as keyof typeof mappings];\n};\n\nconst checkIconExists = async (url: string) => {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.ok; // Returns true if the icon exists\n  } catch {\n    return false;\n  }\n};\n\nexport const getTechLogos = async (techArray: string[]) => {\n  const logoURLs = techArray.map((tech) => {\n    const normalized = normalizeTechName(tech);\n    return {\n      tech,\n      url: `${techIconBaseURL}/${normalized}/${normalized}-original.svg`,\n    };\n  });\n\n  const results = await Promise.all(\n    logoURLs.map(async ({ tech, url }) => ({\n      tech,\n      url: (await checkIconExists(url)) ? url : \"/tech.svg\",\n    }))\n  );\n\n  return results;\n};\n\nexport const getRandomInterviewCover = () => {\n  const randomIndex = Math.floor(Math.random() * interviewCovers.length);\n  return `/covers${interviewCovers[randomIndex]}`;\n};\n","size_bytes":1326},"lib/vapi.sdk.ts":{"content":"import Vapi from \"@vapi-ai/web\";\n\nexport const vapi = new Vapi(process.env.NEXT_PUBLIC_VAPI_WEB_TOKEN!);\n","size_bytes":105},"types/index.d.ts":{"content":"interface Feedback {\n  id: string;\n  interviewId: string;\n  totalScore: number;\n  categoryScores: Array<{\n    name: string;\n    score: number;\n    comment: string;\n  }>;\n  strengths: string[];\n  areasForImprovement: string[];\n  finalAssessment: string;\n  createdAt: string;\n}\n\ninterface Interview {\n  id: string;\n  role: string;\n  level: string;\n  questions: string[];\n  techstack: string[];\n  createdAt: string;\n  userId: string;\n  type: string;\n  domain?: string;\n  finalized: boolean;\n}\n\ninterface CreateFeedbackParams {\n  interviewId: string;\n  userId: string;\n  transcript: { role: string; content: string }[];\n  feedbackId?: string;\n}\n\ninterface User {\n  name: string;\n  email: string;\n  id: string;\n}\n\ninterface InterviewCardProps {\n  interviewId?: string;\n  userId?: string;\n  role: string;\n  type: string;\n  techstack: string[];\n  createdAt?: string;\n}\n\ninterface AgentProps {\n  userName: string;\n  userId?: string;\n  interviewId?: string;\n  feedbackId?: string;\n  type: \"generate\" | \"interview\";\n  questions?: string[];\n}\n\ninterface RouteParams {\n  params: Promise<Record<string, string>>;\n  searchParams: Promise<Record<string, string>>;\n}\n\ninterface GetFeedbackByInterviewIdParams {\n  interviewId: string;\n  userId: string;\n}\n\ninterface GetLatestInterviewsParams {\n  userId: string;\n  limit?: number;\n}\n\ninterface SignInParams {\n  email: string;\n  idToken: string;\n}\n\ninterface SignUpParams {\n  uid: string;\n  name: string;\n  email: string;\n  password: string;\n}\n\ntype FormType = \"sign-in\" | \"sign-up\";\n\ninterface InterviewFormProps {\n  interviewId: string;\n  role: string;\n  level: string;\n  type: string;\n  techstack: string[];\n  amount: number;\n}\n\ninterface TechIconProps {\n  techStack: string[];\n}\n","size_bytes":1714},"types/vapi.d.ts":{"content":"enum MessageTypeEnum {\n  TRANSCRIPT = \"transcript\",\n  FUNCTION_CALL = \"function-call\",\n  FUNCTION_CALL_RESULT = \"function-call-result\",\n  ADD_MESSAGE = \"add-message\",\n}\n\nenum MessageRoleEnum {\n  USER = \"user\",\n  SYSTEM = \"system\",\n  ASSISTANT = \"assistant\",\n}\n\nenum TranscriptMessageTypeEnum {\n  PARTIAL = \"partial\",\n  FINAL = \"final\",\n}\n\ninterface BaseMessage {\n  type: MessageTypeEnum;\n}\n\ninterface TranscriptMessage extends BaseMessage {\n  type: MessageTypeEnum.TRANSCRIPT;\n  role: MessageRoleEnum;\n  transcriptType: TranscriptMessageTypeEnum;\n  transcript: string;\n}\n\ninterface FunctionCallMessage extends BaseMessage {\n  type: MessageTypeEnum.FUNCTION_CALL;\n  functionCall: {\n    name: string;\n    parameters: unknown;\n  };\n}\n\ninterface FunctionCallResultMessage extends BaseMessage {\n  type: MessageTypeEnum.FUNCTION_CALL_RESULT;\n  functionCallResult: {\n    forwardToClientEnabled?: boolean;\n    result: unknown;\n    [a: string]: unknown;\n  };\n}\n\ntype Message =\n  | TranscriptMessage\n  | FunctionCallMessage\n  | FunctionCallResultMessage;\n","size_bytes":1045},"app/(auth)/layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { redirect } from \"next/navigation\";\n\nimport { isAuthenticated } from \"@/lib/actions/auth.action\";\n\nconst AuthLayout = async ({ children }: { children: ReactNode }) => {\n  const isUserAuthenticated = await isAuthenticated();\n  if (isUserAuthenticated) redirect(\"/\");\n\n  return <div className=\"auth-layout\">{children}</div>;\n};\n\nexport default AuthLayout;\n","size_bytes":397},"app/(root)/layout.tsx":{"content":"import Link from \"next/link\";\nimport Image from \"next/image\";\nimport { ReactNode } from \"react\";\nimport { redirect } from \"next/navigation\";\n\nimport { isAuthenticated } from \"@/lib/actions/auth.action\";\nimport LogoutButton from \"@/components/LogoutButton\";\n\nconst Layout = async ({ children }: { children: ReactNode }) => {\n  const isUserAuthenticated = await isAuthenticated();\n  if (!isUserAuthenticated) {\n    console.log(\"User not authenticated, redirecting to sign-in\");\n    redirect(\"/sign-in\");\n  }\n\n  return (\n    <div className=\"root-layout\">\n      <nav className=\"flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center gap-2\">\n          <Image src=\"/logo.svg\" alt=\"MockMate Logo\" width={38} height={32} />\n          <h2 className=\"text-primary-100\">Your Interviewer</h2>\n        </Link>\n        <LogoutButton />\n      </nav>\n\n      {children}\n    </div>\n  );\n};\n\nexport default Layout;\n","size_bytes":929},"app/(root)/page.tsx":{"content":"import Link from \"next/link\";\nimport Image from \"next/image\";\n\nimport { Button } from \"@/components/ui/button\";\nimport InterviewCard from \"@/components/InterviewCard\";\nimport DomainSelector from \"@/components/DomainSelector\";\n\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\nimport {\n  getInterviewsByUserId,\n  getLatestInterviews,\n} from \"@/lib/actions/general.action\";\n\nasync function Home() {\n  const user = await getCurrentUser();\n\n  // Only fetch interviews if user is logged in\n  const [userInterviews, allInterview] = user?.id \n    ? await Promise.all([\n        getInterviewsByUserId(user.id),\n        getLatestInterviews({ userId: user.id }),\n      ])\n    : [null, null];\n\n  const hasPastInterviews = userInterviews?.length! > 0;\n  const hasUpcomingInterviews = allInterview?.length! > 0;\n\n  return (\n    <>\n      <section className=\"card-cta\">\n        <div className=\"flex flex-col gap-6 max-w-lg\">\n          <h2>Get Interview-Ready with AI-Powered Practice & Feedback</h2>\n          <p className=\"text-lg\">\n            Practice real interview questions & get instant feedback\n          </p>\n\n          <Button asChild className=\"btn-primary max-sm:w-full\">\n            <Link href=\"/interview\">Start an Interview</Link>\n          </Button>\n        </div>\n\n        <Image\n          src=\"/robot.png\"\n          alt=\"robo-dude\"\n          width={400}\n          height={400}\n          className=\"max-sm:hidden\"\n        />\n      </section>\n\n      <section className=\"flex flex-col gap-6 mt-8\">\n        <h2>Your Interviews</h2>\n\n        <div className=\"interviews-section\">\n          {hasPastInterviews ? (\n            userInterviews?.map((interview) => (\n              <InterviewCard\n                key={interview.id}\n                userId={user?.id}\n                interviewId={interview.id}\n                role={interview.role}\n                type={interview.type}\n                techstack={interview.techstack}\n                createdAt={interview.createdAt}\n              />\n            ))\n          ) : (\n            <p>You haven&apos;t taken any interviews yet</p>\n          )}\n        </div>\n      </section>\n\n      <section className=\"flex flex-col gap-6 mt-8\">\n        <h2>Choose Your Interview Domain</h2>\n        <DomainSelector userId={user?.id || \"\"} />\n      </section>\n    </>\n  );\n}\n\nexport default Home;\n","size_bytes":2341},"components/ui/button.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      suppressHydrationWarning={true as any}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2183},"components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3759},"components/ui/input.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      suppressHydrationWarning={true}\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n","size_bytes":1025},"components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":611},"components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"lib/actions/auth.action.ts":{"content":"\"use server\";\n\nimport { auth, db } from \"@/firebase/admin\";\nimport { cookies } from \"next/headers\";\n\n// Session duration (1 week)\nconst SESSION_DURATION = 60 * 60 * 24 * 7;\n\n// Set session cookie\nexport async function setSessionCookie(idToken: string) {\n  const cookieStore = await cookies();\n\n  if (!auth) {\n    throw new Error(\"Authentication not configured\");\n  }\n\n  // Create session cookie\n  const sessionCookie = await auth.createSessionCookie(idToken, {\n    expiresIn: SESSION_DURATION * 1000, // milliseconds\n  });\n\n  // Set cookie in the browser\n  cookieStore.set(\"session\", sessionCookie, {\n    maxAge: SESSION_DURATION,\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n    path: \"/\",\n    sameSite: \"lax\",\n  });\n}\n\nexport async function signUp(params: SignUpParams) {\n  const { uid, name, email } = params;\n\n  try {\n    if (!db) {\n      return {\n        success: false,\n        message: \"Database not configured. Please set up Firebase.\",\n      };\n    }\n\n    // check if user exists in db\n    const userRecord = await db.collection(\"users\").doc(uid).get();\n    if (userRecord.exists)\n      return {\n        success: false,\n        message: \"User already exists. Please sign in.\",\n      };\n\n    // save user to db\n    await db.collection(\"users\").doc(uid).set({\n      name,\n      email,\n      // profileURL,\n      // resumeURL,\n    });\n\n    return {\n      success: true,\n      message: \"Account created successfully. Please sign in.\",\n    };\n  } catch (error: any) {\n    console.error(\"Error creating user:\", error);\n\n    // Handle Firebase specific errors\n    if (error.code === \"auth/email-already-exists\") {\n      return {\n        success: false,\n        message: \"This email is already in use\",\n      };\n    }\n\n    return {\n      success: false,\n      message: \"Failed to create account. Please try again.\",\n    };\n  }\n}\n\nexport async function signIn(params: SignInParams) {\n  const { email, idToken } = params;\n\n  try {\n    if (!auth) {\n      return {\n        success: false,\n        message: \"Authentication not configured. Please set up Firebase.\",\n      };\n    }\n\n    const userRecord = await auth.getUserByEmail(email);\n    if (!userRecord)\n      return {\n        success: false,\n        message: \"User does not exist. Create an account.\",\n      };\n\n    await setSessionCookie(idToken);\n    \n    return {\n      success: true,\n      message: \"Signed in successfully.\",\n    };\n  } catch (error: any) {\n    console.log(\"\");\n\n    return {\n      success: false,\n      message: \"Failed to log into account. Please try again.\",\n    };\n  }\n}\n\n// Sign out user by clearing the session cookie\nexport async function signOut() {\n  const cookieStore = await cookies();\n\n  cookieStore.delete(\"session\");\n}\n\n// Get current user from session cookie\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore = await cookies();\n\n  const sessionCookie = cookieStore.get(\"session\")?.value;\n  if (!sessionCookie) return null;\n\n  try {\n    if (!auth) {\n      console.log(\"Auth not configured\");\n      return null;\n    }\n\n    const decodedClaims = await auth.verifySessionCookie(sessionCookie, true);\n\n    // Try to get user info from Firestore database\n    if (db) {\n      try {\n        const userRecord = await db\n          .collection(\"users\")\n          .doc(decodedClaims.uid)\n          .get();\n        \n        if (userRecord.exists) {\n          return {\n            ...userRecord.data(),\n            id: userRecord.id,\n          } as User;\n        }\n      } catch (dbError: any) {\n        console.warn(\"Firestore not available:\", dbError.message);\n        // Continue to fallback below\n      }\n    }\n\n    // Fallback: Return basic user info from session token when Firestore is unavailable\n    console.log(\"Using fallback authentication (Firestore unavailable)\");\n    return {\n      id: decodedClaims.uid,\n      name: decodedClaims.name || decodedClaims.email?.split('@')[0] || \"User\",\n      email: decodedClaims.email || \"\",\n    } as User;\n\n  } catch (error: any) {\n    console.log(\"Session verification failed:\", error.message);\n    // Invalid or expired session\n    return null;\n  }\n}\n\n// Check if user is authenticated\nexport async function isAuthenticated() {\n  const user = await getCurrentUser();\n  return !!user;\n}\n","size_bytes":4271},"lib/actions/general.action.ts":{"content":"\"use server\";\n\nimport { generateObject } from \"ai\";\nimport { google } from \"@ai-sdk/google\";\n\nimport { db } from \"@/firebase/admin\";\nimport { feedbackSchema } from \"@/constants\";\n\nexport async function createFeedback(params: CreateFeedbackParams) {\n  const { interviewId, userId, transcript, feedbackId } = params;\n\n  try {\n    const formattedTranscript = transcript\n      .map(\n        (sentence: { role: string; content: string }) =>\n          `- ${sentence.role}: ${sentence.content}\\n`\n      )\n      .join(\"\");\n\n    const { object } = await generateObject({\n      model: google(\"gemini-2.0-flash-001\", {\n        structuredOutputs: false,\n      }),\n      schema: feedbackSchema,\n      prompt: `\n        You are an AI interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories. Be thorough and detailed in your analysis. Don't be lenient with the candidate. If there are mistakes or areas for improvement, point them out.\n        Transcript:\n        ${formattedTranscript}\n\n        Please score the candidate from 0 to 100 in the following areas. Do not add categories other than the ones provided:\n        - **Communication Skills**: Clarity, articulation, structured responses.\n        - **Technical Knowledge**: Understanding of key concepts for the role.\n        - **Problem-Solving**: Ability to analyze problems and propose solutions.\n        - **Cultural & Role Fit**: Alignment with company values and job role.\n        - **Confidence & Clarity**: Confidence in responses, engagement, and clarity.\n        `,\n      system:\n        \"You are a professional interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories\",\n    });\n\n    const feedback = {\n      interviewId: interviewId,\n      userId: userId,\n      totalScore: object.totalScore,\n      categoryScores: object.categoryScores,\n      strengths: object.strengths,\n      areasForImprovement: object.areasForImprovement,\n      finalAssessment: object.finalAssessment,\n      createdAt: new Date().toISOString(),\n    };\n\n    let feedbackRef;\n\n    if (!db) {\n      console.error(\"Database not configured\");\n      return { success: false };\n    }\n\n    if (feedbackId) {\n      feedbackRef = db.collection(\"feedback\").doc(feedbackId);\n    } else {\n      feedbackRef = db.collection(\"feedback\").doc();\n    }\n\n    await feedbackRef.set(feedback);\n\n    return { success: true, feedbackId: feedbackRef.id };\n  } catch (error) {\n    console.error(\"Error saving feedback:\", error);\n    return { success: false };\n  }\n}\n\nexport async function getInterviewById(id: string): Promise<Interview | null> {\n  if (!db) {\n    console.error(\"Database not configured\");\n    return null;\n  }\n\n  const interview = await db.collection(\"interviews\").doc(id).get();\n\n  return interview.data() as Interview | null;\n}\n\nexport async function getFeedbackByInterviewId(\n  params: GetFeedbackByInterviewIdParams\n): Promise<Feedback | null> {\n  const { interviewId, userId } = params;\n\n  if (!db) {\n    console.error(\"Database not configured\");\n    return null;\n  }\n\n  const querySnapshot = await db\n    .collection(\"feedback\")\n    .where(\"interviewId\", \"==\", interviewId)\n    .where(\"userId\", \"==\", userId)\n    .limit(1)\n    .get();\n\n  if (querySnapshot.empty) return null;\n\n  const feedbackDoc = querySnapshot.docs[0];\n  return { id: feedbackDoc.id, ...feedbackDoc.data() } as Feedback;\n}\n\nexport async function getLatestInterviews(\n  params: GetLatestInterviewsParams\n): Promise<Interview[] | null> {\n  const { userId, limit = 20 } = params;\n\n  if (!db) {\n    console.error(\"Database not configured\");\n    return null;\n  }\n\n  try {\n    // Try the optimal query first (requires composite index)\n    const interviews = await db\n      .collection(\"interviews\")\n      .orderBy(\"createdAt\", \"desc\")\n      .where(\"finalized\", \"==\", true)\n      .where(\"userId\", \"!=\", userId)\n      .limit(limit)\n      .get();\n\n    return interviews.docs.map((doc) => ({\n      id: doc.id,\n      ...doc.data(),\n    })) as Interview[];\n\n  } catch (error: any) {\n    // If index is missing, fall back to simpler query and filter client-side\n    if (error.code === 9 || error.message?.includes('index')) {\n      console.warn(\"Firestore index missing for getLatestInterviews, using fallback\");\n      try {\n        // Simpler query: just get finalized interviews and filter/sort client-side\n        const interviews = await db\n          .collection(\"interviews\")\n          .where(\"finalized\", \"==\", true)\n          .limit(limit * 3) // Get more to account for filtering out current user\n          .get();\n\n        const interviewData = interviews.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Interview[];\n\n        // Filter out current user's interviews and sort by createdAt desc\n        const filteredInterviews = interviewData\n          .filter((interview) => interview.userId !== userId)\n          .sort((a, b) => {\n            const dateA = new Date(a.createdAt || 0).getTime();\n            const dateB = new Date(b.createdAt || 0).getTime();\n            return dateB - dateA; // desc order\n          })\n          .slice(0, limit); // Apply limit after sorting\n\n        return filteredInterviews;\n\n      } catch (fallbackError) {\n        console.error(\"Error in fallback query for getLatestInterviews:\", fallbackError);\n        return []; // Return empty array instead of null to prevent crashes\n      }\n    }\n    \n    console.error(\"Error fetching latest interviews:\", error);\n    return []; // Return empty array instead of null\n  }\n}\n\nexport async function getInterviewsByUserId(\n  userId: string\n): Promise<Interview[] | null> {\n  if (!db) {\n    console.error(\"Database not configured\");\n    return null;\n  }\n\n  try {\n    // Try the optimal query first (requires composite index)\n    const interviews = await db\n      .collection(\"interviews\")\n      .where(\"userId\", \"==\", userId)\n      .orderBy(\"createdAt\", \"desc\")\n      .get();\n\n    return interviews.docs.map((doc) => ({\n      id: doc.id,\n      ...doc.data(),\n    })) as Interview[];\n\n  } catch (error: any) {\n    // If index is missing, fall back to simpler query and sort client-side\n    if (error.code === 9 || error.message?.includes('index')) {\n      console.warn(\"Firestore index missing, using fallback query\");\n      try {\n        const interviews = await db\n          .collection(\"interviews\")\n          .where(\"userId\", \"==\", userId)\n          .get();\n\n        const interviewData = interviews.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Interview[];\n\n        // Sort client-side by createdAt desc\n        return interviewData.sort((a, b) => {\n          const dateA = new Date(a.createdAt || 0).getTime();\n          const dateB = new Date(b.createdAt || 0).getTime();\n          return dateB - dateA; // desc order\n        });\n\n      } catch (fallbackError) {\n        console.error(\"Error in fallback query:\", fallbackError);\n        return []; // Return empty array instead of null to prevent crashes\n      }\n    }\n    \n    console.error(\"Error fetching interviews:\", error);\n    return []; // Return empty array instead of null\n  }\n}\n","size_bytes":7188},"app/(auth)/sign-in/page.tsx":{"content":"import AuthForm from \"@/components/AuthForm\";\n\nconst Page = () => {\n  return <AuthForm type=\"sign-in\" />;\n};\n\nexport default Page;\n","size_bytes":131},"app/(auth)/sign-up/page.tsx":{"content":"import AuthForm from \"@/components/AuthForm\";\n\nconst Page = () => {\n  return <AuthForm type=\"sign-up\" />;\n};\n\nexport default Page;\n","size_bytes":131},"app/(root)/interview/page.tsx":{"content":"import DomainSelector from \"@/components/DomainSelector\";\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\n\nconst Page = async () => {\n  const user = await getCurrentUser();\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <DomainSelector\n        userId={user?.id!}\n      />\n    </div>\n  );\n};\n\nexport default Page;\n","size_bytes":346},"app/(root)/interview/[id]/page.tsx":{"content":"import Image from \"next/image\";\nimport { redirect } from \"next/navigation\";\n\nimport Agent from \"@/components/Agent\";\nimport { getRandomInterviewCover } from \"@/lib/utils\";\n\nimport {\n  getFeedbackByInterviewId,\n  getInterviewById,\n} from \"@/lib/actions/general.action\";\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\nimport DisplayTechIcons from \"@/components/DisplayTechIcons\";\n\nconst InterviewDetails = async ({ params }: RouteParams) => {\n  const { id } = await params;\n\n  const user = await getCurrentUser();\n\n  const interview = await getInterviewById(id);\n  if (!interview) redirect(\"/\");\n\n  const feedback = await getFeedbackByInterviewId({\n    interviewId: id,\n    userId: user?.id!,\n  });\n\n  return (\n    <>\n      <div className=\"flex flex-row gap-4 justify-between\">\n        <div className=\"flex flex-row gap-4 items-center max-sm:flex-col\">\n          <div className=\"flex flex-row gap-4 items-center\">\n            <Image\n              src={getRandomInterviewCover()}\n              alt=\"cover-image\"\n              width={40}\n              height={40}\n              className=\"rounded-full object-cover size-[40px]\"\n            />\n            <h3 className=\"capitalize\">{interview.role} Interview</h3>\n          </div>\n\n          <DisplayTechIcons techStack={interview.techstack} />\n        </div>\n\n        <p className=\"bg-dark-200 px-4 py-2 rounded-lg h-fit\">\n          {interview.type}\n        </p>\n      </div>\n\n      <Agent\n        userName={user?.name!}\n        userId={user?.id}\n        interviewId={id}\n        type=\"interview\"\n        questions={interview.questions}\n        feedbackId={feedback?.id}\n      />\n    </>\n  );\n};\n\nexport default InterviewDetails;\n","size_bytes":1690},"app/api/vapi/generate/route.ts":{"content":"import { generateText } from \"ai\";\nimport { google } from \"@ai-sdk/google\";\n\nimport { db } from \"@/firebase/admin\";\nimport { getRandomInterviewCover } from \"@/lib/utils\";\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\nimport { interviewDomains } from \"@/constants\";\n\nexport async function POST(request: Request) {\n  const { type, role, level, techstack, amount, domain } = await request.json();\n\n  // Get the authenticated user from server session\n  const user = await getCurrentUser();\n  if (!user?.id) {\n    return Response.json({ \n      success: false, \n      error: \"Authentication required\" \n    }, { status: 401 });\n  }\n\n  // Validate domain if provided\n  if (domain && !interviewDomains.find(d => d.id === domain)) {\n    return Response.json({ \n      success: false, \n      error: \"Invalid domain selected\" \n    }, { status: 400 });\n  }\n\n  try {\n    // Check if database is available\n    if (!db) {\n      return Response.json({ \n        success: false, \n        error: \"Database not configured. Please set up Firebase configuration.\" \n      }, { status: 500 });\n    }\n\n    // Create domain-specific prompt enhancement\n    const domainContext = domain ? `\n        This interview is specifically for the ${domain} domain.\n        Focus on domain-specific scenarios, challenges, and best practices.\n        Include questions about industry trends, common tools, and real-world applications in this domain.\n    ` : '';\n\n    const { text: questions } = await generateText({\n      model: google(\"gemini-2.0-flash-001\"),\n      prompt: `Prepare questions for a job interview.\n        The job role is ${role}.\n        The job experience level is ${level}.\n        The tech stack used in the job is: ${techstack}.\n        The focus between behavioural and technical questions should lean towards: ${type}.\n        ${domainContext}\n        The amount of questions required is: ${amount}.\n        \n        Create a mix of:\n        - Technical questions specific to the role and tech stack\n        - Problem-solving scenarios relevant to the domain\n        - Behavioral questions about teamwork and communication\n        - Questions about industry best practices and trends\n        \n        Please return only the questions, without any additional text.\n        The questions are going to be read by a voice assistant so do not use \"/\" or \"*\" or any other special characters which might break the voice assistant.\n        Return the questions formatted like this:\n        [\"Question 1\", \"Question 2\", \"Question 3\"]\n        \n        Thank you! <3\n    `,\n    });\n\n    // Parse and validate questions with error handling\n    let parsedQuestions;\n    try {\n      parsedQuestions = JSON.parse(questions);\n      if (!Array.isArray(parsedQuestions)) {\n        throw new Error(\"Questions must be an array\");\n      }\n    } catch (parseError) {\n      console.error(\"Failed to parse questions:\", parseError);\n      return Response.json({ \n        success: false, \n        error: \"Failed to generate valid interview questions. Please try again.\" \n      }, { status: 500 });\n    }\n\n    const interview = {\n      role: role,\n      type: type,\n      level: level,\n      techstack: techstack.split(\",\").map((tech: string) => tech.trim()),\n      questions: parsedQuestions,\n      userId: user.id, // Use authenticated user ID\n      domain: domain || null,\n      finalized: true,\n      coverImage: getRandomInterviewCover(),\n      createdAt: new Date().toISOString(),\n    };\n\n    const docRef = await db.collection(\"interviews\").add(interview);\n\n    return Response.json({ \n      success: true, \n      interviewId: docRef.id \n    }, { status: 200 });\n  } catch (error: any) {\n    console.error(\"Error:\", error);\n    const errorMessage = error?.message || \"An unexpected error occurred\";\n    return Response.json({ success: false, error: errorMessage }, { status: 500 });\n  }\n}\n\nexport async function GET() {\n  return Response.json({ success: true, data: \"Thank you!\" }, { status: 200 });\n}\n","size_bytes":3979},"app/(root)/interview/[id]/feedback/page.tsx":{"content":"import dayjs from \"dayjs\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { redirect } from \"next/navigation\";\n\nimport {\n  getFeedbackByInterviewId,\n  getInterviewById,\n} from \"@/lib/actions/general.action\";\nimport { Button } from \"@/components/ui/button\";\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\n\nconst Feedback = async ({ params }: RouteParams) => {\n  const { id } = await params;\n  const user = await getCurrentUser();\n\n  const interview = await getInterviewById(id);\n  if (!interview) redirect(\"/\");\n\n  const feedback = await getFeedbackByInterviewId({\n    interviewId: id,\n    userId: user?.id!,\n  });\n\n  return (\n    <section className=\"section-feedback\">\n      <div className=\"flex flex-row justify-center\">\n        <h1 className=\"text-4xl font-semibold\">\n          Feedback on the Interview -{\" \"}\n          <span className=\"capitalize\">{interview.role}</span> Interview\n        </h1>\n      </div>\n\n      <div className=\"flex flex-row justify-center \">\n        <div className=\"flex flex-row gap-5\">\n          {/* Overall Impression */}\n          <div className=\"flex flex-row gap-2 items-center\">\n            <Image src=\"/star.svg\" width={22} height={22} alt=\"star\" />\n            <p>\n              Overall Impression:{\" \"}\n              <span className=\"text-primary-200 font-bold\">\n                {feedback?.totalScore}\n              </span>\n              /100\n            </p>\n          </div>\n\n          {/* Date */}\n          <div className=\"flex flex-row gap-2\">\n            <Image src=\"/calendar.svg\" width={22} height={22} alt=\"calendar\" />\n            <p>\n              {feedback?.createdAt\n                ? dayjs(feedback.createdAt).format(\"MMM D, YYYY h:mm A\")\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <p>{feedback?.finalAssessment}</p>\n\n      {/* Interview Breakdown */}\n      <div className=\"flex flex-col gap-4\">\n        <h2>Breakdown of the Interview:</h2>\n        {feedback?.categoryScores?.map((category, index) => (\n          <div key={index}>\n            <p className=\"font-bold\">\n              {index + 1}. {category.name} ({category.score}/100)\n            </p>\n            <p>{category.comment}</p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex flex-col gap-3\">\n        <h3>Strengths</h3>\n        <ul>\n          {feedback?.strengths?.map((strength, index) => (\n            <li key={index}>{strength}</li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"flex flex-col gap-3\">\n        <h3>Areas for Improvement</h3>\n        <ul>\n          {feedback?.areasForImprovement?.map((area, index) => (\n            <li key={index}>{area}</li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"buttons\">\n        <Button className=\"btn-secondary flex-1\">\n          <Link href=\"/\" className=\"flex w-full justify-center\">\n            <p className=\"text-sm font-semibold text-primary-200 text-center\">\n              Back to dashboard\n            </p>\n          </Link>\n        </Button>\n\n        <Button className=\"btn-primary flex-1\">\n          <Link\n            href={`/interview/${id}`}\n            className=\"flex w-full justify-center\"\n          >\n            <p className=\"text-sm font-semibold text-black text-center\">\n              Retake Interview\n            </p>\n          </Link>\n        </Button>\n      </div>\n    </section>\n  );\n};\n\nexport default Feedback;\n","size_bytes":3451},"components/DomainSelector.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { interviewDomains } from \"@/constants\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DomainSelectorProps {\n  userId: string;\n}\n\nconst DomainSelector = ({ userId }: DomainSelectorProps) => {\n  const router = useRouter();\n  const [selectedDomain, setSelectedDomain] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const handleDomainSelect = async (domainId: string) => {\n    setSelectedDomain(domainId);\n    setIsGenerating(true);\n\n    const domain = interviewDomains.find(d => d.id === domainId);\n    if (!domain) {\n      toast.error(\"Invalid domain selection\");\n      setIsGenerating(false);\n      return;\n    }\n\n    try {\n      // Get a random role from the domain's common roles\n      const randomRole = domain.commonRoles[Math.floor(Math.random() * domain.commonRoles.length)];\n      \n      // Create the interview with domain-specific data\n      const response = await fetch(\"/api/vapi/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          type: \"Mixed\", // Default to mixed for domain interviews\n          role: randomRole,\n          level: \"Mid-level\", // Default level\n          techstack: domain.techStack.join(\", \"),\n          amount: 5, // Default number of questions\n          domain: domainId, // Add domain info\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success && data.interviewId) {\n        toast.success(`${domain.name} interview created successfully!`);\n        router.push(`/interview/${data.interviewId}`);\n      } else {\n        const errorMessage = typeof data.error === 'string' ? data.error : \"Failed to create interview\";\n        toast.error(errorMessage);\n      }\n    } catch (error) {\n      console.error(\"Error creating interview:\", error);\n      toast.error(\"Failed to create interview. Please try again.\");\n    } finally {\n      setIsGenerating(false);\n      setSelectedDomain(null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h2 className=\"text-2xl font-bold\">Choose Your Interview Domain</h2>\n        <p className=\"text-muted-foreground\">\n          Select a domain to start a specialized interview with AI\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {interviewDomains.map((domain) => (\n          <div\n            key={domain.id}\n            className={cn(\n              \"card-border p-6 cursor-pointer transition-all duration-200 hover:scale-105\",\n              selectedDomain === domain.id && \"ring-2 ring-primary\"\n            )}\n            onClick={() => !isGenerating && handleDomainSelect(domain.id)}\n          >\n            <div className=\"flex flex-col items-center text-center space-y-4\">\n              <div className=\"text-4xl\">{domain.icon}</div>\n              <h3 className=\"font-semibold text-lg\">{domain.name}</h3>\n              <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                {domain.description}\n              </p>\n              \n              <div className=\"flex flex-wrap gap-2 justify-center\">\n                {domain.techStack.slice(0, 3).map((tech) => (\n                  <span\n                    key={tech}\n                    className=\"px-2 py-1 bg-secondary text-secondary-foreground rounded-md text-xs\"\n                  >\n                    {tech}\n                  </span>\n                ))}\n                {domain.techStack.length > 3 && (\n                  <span className=\"px-2 py-1 bg-secondary text-secondary-foreground rounded-md text-xs\">\n                    +{domain.techStack.length - 3}\n                  </span>\n                )}\n              </div>\n\n              <Button\n                className=\"w-full\"\n                disabled={isGenerating}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleDomainSelect(domain.id);\n                }}\n              >\n                {selectedDomain === domain.id && isGenerating ? (\n                  \"Generating Interview...\"\n                ) : (\n                  \"Start Interview\"\n                )}\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          Each interview will be tailored to the selected domain with relevant questions and scenarios.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default DomainSelector;","size_bytes":4755},"render.yaml":{"content":"services:\n  - type: web\n    name: your-interviewer-app\n    env: node\n    plan: starter\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: NEXT_PUBLIC_BASE_URL\n        fromService:\n          type: web\n          name: your-interviewer-app\n          property: host\n    healthCheckPath: /","size_bytes":382},"components/LogoutButton.tsx":{"content":"\"use client\";\n\nimport { toast } from \"sonner\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { signOut } from \"@/lib/actions/auth.action\";\n\nconst LogoutButton = () => {\n  const router = useRouter();\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n      toast.success(\"Logged out successfully\");\n      router.push(\"/sign-in\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      toast.error(\"Failed to logout. Please try again.\");\n    }\n  };\n\n  return (\n    <Button \n      onClick={handleLogout}\n      className=\"btn-secondary\"\n      type=\"button\"\n    >\n      Logout\n    </Button>\n  );\n};\n\nexport default LogoutButton;","size_bytes":716}},"version":1}